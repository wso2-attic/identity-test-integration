<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Solution3_Provision Federated Users by the Identity Provider" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <stringProp name="CookieManager.policy">standard</stringProp>
        <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
      </CookieManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="isHost" elementType="Argument">
            <stringProp name="Argument.name">isHost</stringProp>
            <stringProp name="Argument.value">${__property(serverHost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="isPort" elementType="Argument">
            <stringProp name="Argument.name">isPort</stringProp>
            <stringProp name="Argument.value">${__property(serverPort)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminCredentials" elementType="Argument">
            <stringProp name="Argument.name">adminCredentials</stringProp>
            <stringProp name="Argument.value">${__property(adminCredentials)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminusername" elementType="Argument">
            <stringProp name="Argument.name">adminusername</stringProp>
            <stringProp name="Argument.value">${__property(adminusername)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="adminpassword" elementType="Argument">
            <stringProp name="Argument.name">adminpassword</stringProp>
            <stringProp name="Argument.value">${__property(adminpassword)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="spName" elementType="Argument">
            <stringProp name="Argument.name">spName</stringProp>
            <stringProp name="Argument.value">${__property(spName)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="spDescription" elementType="Argument">
            <stringProp name="Argument.name">spDescription</stringProp>
            <stringProp name="Argument.value">${__property(spDescription)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="carbonServer" elementType="Argument">
            <stringProp name="Argument.name">carbonServer</stringProp>
            <stringProp name="Argument.value">${__property(carbonServer)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tomcatPort" elementType="Argument">
            <stringProp name="Argument.name">tomcatPort</stringProp>
            <stringProp name="Argument.value">${__property(tomcatPort)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="idpName" elementType="Argument">
            <stringProp name="Argument.name">idpName</stringProp>
            <stringProp name="Argument.value">${__property(idpName)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="idpDescription" elementType="Argument">
            <stringProp name="Argument.name">idpDescription</stringProp>
            <stringProp name="Argument.value">${__property(idpDescription)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fbClientId" elementType="Argument">
            <stringProp name="Argument.name">fbClientId</stringProp>
            <stringProp name="Argument.value">${__property(fbClientId)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fbClientSecret" elementType="Argument">
            <stringProp name="Argument.name">fbClientSecret</stringProp>
            <stringProp name="Argument.value">${__property(fbClientSecret)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fbScope" elementType="Argument">
            <stringProp name="Argument.name">fbScope</stringProp>
            <stringProp name="Argument.value">${__property(fbScope)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fbUserInfoFields" elementType="Argument">
            <stringProp name="Argument.name">fbUserInfoFields</stringProp>
            <stringProp name="Argument.value">${__property(fbUserInfoFields)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tomcatHost" elementType="Argument">
            <stringProp name="Argument.name">tomcatHost</stringProp>
            <stringProp name="Argument.value">${__property(tomcatHost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="idp2Name" elementType="Argument">
            <stringProp name="Argument.name">idp2Name</stringProp>
            <stringProp name="Argument.value">${__property(idp3Name)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="twitterClientId" elementType="Argument">
            <stringProp name="Argument.name">twitterClientId</stringProp>
            <stringProp name="Argument.value">${__property(twitterClientId)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="twitterClientSecret" elementType="Argument">
            <stringProp name="Argument.name">twitterClientSecret</stringProp>
            <stringProp name="Argument.value">${__property(twitterClientSecret)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="idp2Description" elementType="Argument">
            <stringProp name="Argument.name">idp2Description</stringProp>
            <stringProp name="Argument.value">${__property(idp3Description)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="twitterUserName" elementType="Argument">
            <stringProp name="Argument.name">twitterUserName</stringProp>
            <stringProp name="Argument.value">${__property(twitterUserName)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="twitterPassword" elementType="Argument">
            <stringProp name="Argument.name">twitterPassword</stringProp>
            <stringProp name="Argument.value">${__property(twitterPassword)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fbUserName" elementType="Argument">
            <stringProp name="Argument.name">fbUserName</stringProp>
            <stringProp name="Argument.value">${__property(fbUserName)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fbPassword" elementType="Argument">
            <stringProp name="Argument.name">fbPassword</stringProp>
            <stringProp name="Argument.value">${__property(fbPassword)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secondaryJDBCDomain1" elementType="Argument">
            <stringProp name="Argument.name">secondaryJDBCDomain1</stringProp>
            <stringProp name="Argument.value">${__property(secondaryJDBCDomain1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secondaryJDBCDomain2" elementType="Argument">
            <stringProp name="Argument.name">secondaryJDBCDomain2</stringProp>
            <stringProp name="Argument.value">${__property(secondaryJDBCDomain2)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fbIncorrectClientId" elementType="Argument">
            <stringProp name="Argument.name">fbIncorrectClientId</stringProp>
            <stringProp name="Argument.value">${__property(fbIncorrectClientId)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="isCallbackHost" elementType="Argument">
            <stringProp name="Argument.name">isCallbackHost</stringProp>
            <stringProp name="Argument.value">${__property(isCallbackHost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="setUpEnvironment" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1517934480000</longProp>
        <longProp name="ThreadGroup.end_time">1517934480000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:aut=&quot;http://authentication.services.core.carbon.wso2.org&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;aut:login&gt;&#xd;
         &lt;aut:username&gt;${adminusername}&lt;/aut:username&gt;&#xd;
         &lt;aut:password&gt;${adminpassword}&lt;/aut:password&gt;&#xd;
      &lt;/aut:login&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
          <stringProp name="HTTPSampler.port">${isPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/services/AuthenticationAdmin.AuthenticationAdminHttpsSoap11Endpoint/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">urn:login</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createSecondaryUserStoreToProvisionFBUsers" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://dto.configuration.store.user.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:addUserStore&gt;&#xd;
         &lt;xsd:userStoreDTO&gt;&#xd;
            &lt;xsd1:className&gt;org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager&lt;/xsd1:className&gt;&#xd;
            &lt;xsd1:description&gt;test&lt;/xsd1:description&gt;&#xd;
            &lt;xsd1:disabled&gt;false&lt;/xsd1:disabled&gt;&#xd;
            &lt;xsd1:domainId&gt;${secondaryJDBCDomain1}&lt;/xsd1:domainId&gt;&#xd;
		  &lt;xsd1:properties&gt;&#xd;
               &lt;xsd1:name&gt;url&lt;/xsd1:name&gt;&#xd;
               &lt;xsd1:value&gt;jdbc:mysql://192.168.48.153:3306/IS_Solution03_Userstore1&lt;/xsd1:value&gt;&#xd;
            &lt;/xsd1:properties&gt;&#xd;
            &lt;xsd1:properties&gt;&#xd;
               &lt;xsd1:name&gt;userName&lt;/xsd1:name&gt;&#xd;
               &lt;xsd1:value&gt;root&lt;/xsd1:value&gt;&#xd;
            &lt;/xsd1:properties&gt;&#xd;
            &lt;xsd1:properties&gt;&#xd;
               &lt;xsd1:name&gt;password&lt;/xsd1:name&gt;&#xd;
               &lt;xsd1:value&gt;root&lt;/xsd1:value&gt;&#xd;
            &lt;/xsd1:properties&gt;&#xd;
            &lt;xsd1:properties&gt;&#xd;
               &lt;xsd1:name&gt;driverName&lt;/xsd1:name&gt;&#xd;
               &lt;xsd1:value&gt;com.mysql.jdbc.Driver&lt;/xsd1:value&gt;&#xd;
            &lt;/xsd1:properties&gt;&#xd;
            &lt;xsd1:properties&gt;&#xd;
               &lt;xsd1:name&gt;maxActive&lt;/xsd1:name&gt;&#xd;
               &lt;xsd1:value&gt;50&lt;/xsd1:value&gt;&#xd;
            &lt;/xsd1:properties&gt;&#xd;
            &lt;xsd1:properties&gt;&#xd;
               &lt;xsd1:name&gt;maxWait&lt;/xsd1:name&gt;&#xd;
               &lt;xsd1:value&gt;60000&lt;/xsd1:value&gt;&#xd;
            &lt;/xsd1:properties&gt;&#xd;
            &lt;xsd1:properties&gt;&#xd;
               &lt;xsd1:name&gt;validationQuery&lt;/xsd1:name&gt;&#xd;
               &lt;xsd1:value&gt;SELECT 1&lt;/xsd1:value&gt;&#xd;
            &lt;/xsd1:properties&gt;&#xd;
         &lt;/xsd:userStoreDTO&gt;&#xd;
      &lt;/xsd:addUserStore&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
          <stringProp name="HTTPSampler.port">${isPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/services/UserStoreConfigAdminService</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">creaCe Secondary User Store to Provision FB </stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">urn:addUserStore</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="202 OK HTTP Code Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createSecondaryUserStoreToProvisionTwitterUsers" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://dto.configuration.store.user.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:addUserStore&gt;&#xd;
         &lt;xsd:userStoreDTO&gt;&#xd;
            &lt;xsd1:className&gt;org.wso2.carbon.user.core.jdbc.JDBCUserStoreManager&lt;/xsd1:className&gt;&#xd;
            &lt;xsd1:description&gt;test&lt;/xsd1:description&gt;&#xd;
            &lt;xsd1:disabled&gt;false&lt;/xsd1:disabled&gt;&#xd;
            &lt;xsd1:domainId&gt;${secondaryJDBCDomain2}&lt;/xsd1:domainId&gt;&#xd;
		  &lt;xsd1:properties&gt;&#xd;
               &lt;xsd1:name&gt;url&lt;/xsd1:name&gt;&#xd;
               &lt;xsd1:value&gt;jdbc:mysql://192.168.48.153:3306/IS_Solution03_Userstore2&lt;/xsd1:value&gt;&#xd;
            &lt;/xsd1:properties&gt;&#xd;
            &lt;xsd1:properties&gt;&#xd;
               &lt;xsd1:name&gt;userName&lt;/xsd1:name&gt;&#xd;
               &lt;xsd1:value&gt;root&lt;/xsd1:value&gt;&#xd;
            &lt;/xsd1:properties&gt;&#xd;
            &lt;xsd1:properties&gt;&#xd;
               &lt;xsd1:name&gt;password&lt;/xsd1:name&gt;&#xd;
               &lt;xsd1:value&gt;root&lt;/xsd1:value&gt;&#xd;
            &lt;/xsd1:properties&gt;&#xd;
            &lt;xsd1:properties&gt;&#xd;
               &lt;xsd1:name&gt;driverName&lt;/xsd1:name&gt;&#xd;
               &lt;xsd1:value&gt;com.mysql.jdbc.Driver&lt;/xsd1:value&gt;&#xd;
            &lt;/xsd1:properties&gt;&#xd;
            &lt;xsd1:properties&gt;&#xd;
               &lt;xsd1:name&gt;maxActive&lt;/xsd1:name&gt;&#xd;
               &lt;xsd1:value&gt;50&lt;/xsd1:value&gt;&#xd;
            &lt;/xsd1:properties&gt;&#xd;
            &lt;xsd1:properties&gt;&#xd;
               &lt;xsd1:name&gt;maxWait&lt;/xsd1:name&gt;&#xd;
               &lt;xsd1:value&gt;60000&lt;/xsd1:value&gt;&#xd;
            &lt;/xsd1:properties&gt;&#xd;
            &lt;xsd1:properties&gt;&#xd;
               &lt;xsd1:name&gt;validationQuery&lt;/xsd1:name&gt;&#xd;
               &lt;xsd1:value&gt;SELECT 1&lt;/xsd1:value&gt;&#xd;
            &lt;/xsd1:properties&gt;&#xd;
         &lt;/xsd:userStoreDTO&gt;&#xd;
      &lt;/xsd:addUserStore&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
          <stringProp name="HTTPSampler.port">${isPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/services/UserStoreConfigAdminService</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">creaCe Secondary User Store to Provision FB </stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">urn:addUserStore</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="202 OK HTTP Code Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Logout Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:aut=&quot;http://authentication.services.core.carbon.wso2.org&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;aut:logout/&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
          <stringProp name="HTTPSampler.port">${isPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/services/AuthenticationAdmin.AuthenticationAdminHttpsSoap11Endpoint/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">urn:logout</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49588">202</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="provisionFederatedUsersBytheIDPs[Facebook][Twitter]" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1508898362000</longProp>
        <longProp name="ThreadGroup.end_time">1508898362000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="IdentityProvider" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:aut=&quot;http://authentication.services.core.carbon.wso2.org&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;aut:login&gt;&#xd;
         &lt;aut:username&gt;${adminusername}&lt;/aut:username&gt;&#xd;
         &lt;aut:password&gt;${adminpassword}&lt;/aut:password&gt;&#xd;
      &lt;/aut:login&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
            <stringProp name="HTTPSampler.port">${isPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/AuthenticationAdmin.AuthenticationAdminHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:login</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createIDP1Facebook" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:mgt=&quot;http://mgt.idp.carbon.wso2.org&quot; xmlns:xsd=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;  &#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;     &#xd;
      &lt;mgt:addIdP&gt;        &#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;mgt:identityProvider&gt;&#xd;
            &lt;xsd:identityProviderName&gt;${idpName}&lt;/xsd:identityProviderName&gt;           &#xd;
            &lt;xsd:displayName&gt;${idpName}&lt;/xsd:displayName&gt;&#xd;
            &lt;xsd:enable&gt;true&lt;/xsd:enable&gt;&#xd;
            &lt;xsd:identityProviderDescription&gt;${idpDescription}&lt;/xsd:identityProviderDescription&gt;&#xd;
            &lt;xsd:alias&gt;https://${isHost}:${isPort}/oauth2/token/&lt;/xsd:alias&gt;&#xd;
            &lt;xsd:primary&gt;true&lt;/xsd:primary&gt;&#xd;
            &lt;xsd:provisioningRole&gt;-&lt;/xsd:provisioningRole&gt;&#xd;
         &lt;/mgt:identityProvider&gt;&#xd;
      &lt;/mgt:addIdP&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
            <stringProp name="HTTPSampler.port">${isPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityProviderMgtService.IdentityProviderMgtServiceHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${adminCredentials}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:addIdP</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateIDP1FacebookFedAuthFacebookConnector" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:mgt=&quot;http://mgt.idp.carbon.wso2.org&quot; xmlns:xsd=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;mgt:updateIdP&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;mgt:oldIdPName&gt;${idpName}&lt;/mgt:oldIdPName&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;mgt:identityProvider&gt;&#xd;
            &lt;xsd:identityProviderName&gt;${idpName}&lt;/xsd:identityProviderName&gt;           &#xd;
            &lt;xsd:displayName&gt;${idpName}&lt;/xsd:displayName&gt;&#xd;
            &lt;xsd:enable&gt;true&lt;/xsd:enable&gt;&#xd;
            &lt;xsd:identityProviderDescription&gt;${idpDescription}&lt;/xsd:identityProviderDescription&gt;&#xd;
            &lt;xsd:alias&gt;https://${isHost}:${isPort}/oauth2/token/&lt;/xsd:alias&gt;&#xd;
            &lt;xsd:primary&gt;true&lt;/xsd:primary&gt;&#xd;
            &lt;xsd:provisioningRole&gt;-&lt;/xsd:provisioningRole&gt;&#xd;
&#xd;
&#xd;
           &#xd;
&#xd;
	/** Add Facebook as Federated Authenticator */&#xd;
           &lt;xsd:displayName&gt;${idpName}&lt;/xsd:displayName&gt;&#xd;
            &lt;xsd:enable&gt;true&lt;/xsd:enable&gt;&#xd;
            &lt;xsd:federationHub&gt;false&lt;/xsd:federationHub&gt;&#xd;
            &lt;xsd:identityProviderDescription&gt;${idpDescription}&lt;/xsd:identityProviderDescription&gt;&#xd;
            &lt;xsd:identityProviderName&gt;${idpName}&lt;/xsd:identityProviderName&gt;&#xd;
            &lt;xsd:primary&gt;true&lt;/xsd:primary&gt;&#xd;
            &#xd;
            &lt;xsd:defaultAuthenticatorConfig&gt;&#xd;
            &lt;xsd:displayName&gt;${idpName}&lt;/xsd:displayName&gt;&#xd;
               &lt;xsd:name&gt;FacebookAuthenticator&lt;/xsd:name&gt;&#xd;
            &lt;/xsd:defaultAuthenticatorConfig&gt;&#xd;
            &#xd;
            &lt;xsd:federatedAuthenticatorConfigs&gt;&#xd;
               &lt;xsd:displayName&gt;${idpName}&lt;/xsd:displayName&gt;&#xd;
               &lt;xsd:enabled&gt;true&lt;/xsd:enabled&gt;&#xd;
               &lt;xsd:name&gt;FacebookAuthenticator&lt;/xsd:name&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;ClientId&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;${fbClientId}&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;ClientSecret&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;${fbClientSecret}&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;Scope&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;${fbScope}&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;callBackUrl&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;https://${isCallbackHost}/commonauth&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;UserInfoFields&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;${fbUserInfoFields}&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
            &lt;/xsd:federatedAuthenticatorConfigs&gt;&#xd;
&#xd;
            &lt;xsd:justInTimeProvisioningConfig&gt;&#xd;
               &lt;xsd:provisioningEnabled&gt;true&lt;/xsd:provisioningEnabled&gt;&#xd;
               &lt;xsd:provisioningUserStore&gt;${secondaryJDBCDomain1}&lt;/xsd:provisioningUserStore&gt;&#xd;
            &lt;/xsd:justInTimeProvisioningConfig&gt;&#xd;
            &#xd;
         &lt;/mgt:identityProvider&gt;&#xd;
      &lt;/mgt:addIdP&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
            <stringProp name="HTTPSampler.port">${isPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/IdentityProviderMgtService.IdentityProviderMgtServiceHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${adminCredentials}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:updateIdP</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createAndUpdateIDP2TwitterFedAuthTwitterConnector" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:mgt=&quot;http://mgt.idp.carbon.wso2.org&quot; xmlns:xsd=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;mgt:addIdP&gt;&#xd;
         &lt;mgt:identityProvider&gt;&#xd;
            &lt;xsd:displayName&gt;${idp2Name}&lt;/xsd:displayName&gt;&#xd;
            &lt;xsd:enable&gt;true&lt;/xsd:enable&gt;&#xd;
            &lt;xsd:federationHub&gt;false&lt;/xsd:federationHub&gt;&#xd;
            &lt;xsd:identityProviderDescription&gt;${idp2Description}&lt;/xsd:identityProviderDescription&gt;&#xd;
            &lt;xsd:identityProviderName&gt;${idp2Name}&lt;/xsd:identityProviderName&gt;&#xd;
            &lt;xsd:alias&gt;https://${isHost}:${isPort}/oauth2/token/&lt;/xsd:alias&gt;&#xd;
            &lt;xsd:primary&gt;true&lt;/xsd:primary&gt; &#xd;
&#xd;
             &#xd;
            &#xd;
            &lt;xsd:defaultAuthenticatorConfig&gt;&#xd;
            &lt;xsd:displayName&gt;${idp2Name}&lt;/xsd:displayName&gt;&#xd;
               &lt;xsd:name&gt;TwitterAuthenticator&lt;/xsd:name&gt;&#xd;
            &lt;/xsd:defaultAuthenticatorConfig&gt;&#xd;
            &#xd;
            &lt;xsd:federatedAuthenticatorConfigs&gt;&#xd;
               &lt;xsd:displayName&gt;${idp2Name}&lt;/xsd:displayName&gt;&#xd;
               &lt;xsd:enabled&gt;true&lt;/xsd:enabled&gt;&#xd;
               &lt;xsd:name&gt;TwitterAuthenticator&lt;/xsd:name&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;APIKey&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;${twitterClientId}&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;APISecret&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;${twitterClientSecret}&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;callbackUrl&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;https://${isCallbackHost}:${isPort}/commonauth&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
            &lt;/xsd:federatedAuthenticatorConfigs&gt;&#xd;
&#xd;
            &lt;xsd:justInTimeProvisioningConfig&gt;&#xd;
               &lt;xsd:provisioningEnabled&gt;true&lt;/xsd:provisioningEnabled&gt;&#xd;
               &lt;xsd:provisioningUserStore&gt;${secondaryJDBCDomain2}&lt;/xsd:provisioningUserStore&gt;&#xd;
            &lt;/xsd:justInTimeProvisioningConfig&gt;&#xd;
&#xd;
            &#xd;
         &lt;/mgt:identityProvider&gt;&#xd;
      &lt;/mgt:addIdP&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
            <stringProp name="HTTPSampler.port">${isPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/IdentityProviderMgtService.IdentityProviderMgtServiceHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Adding Twitter as a  Federated Authenticator
</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:addIdP</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${adminCredentials}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ServiceProvider" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="createSPTravelocity" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
       &lt;xsd:createApplication&gt; &#xd;
      &lt;xsd:serviceProvider&gt; &#xd;
            &lt;xsd1:applicationName&gt;${spName}&lt;/xsd1:applicationName&gt; &#xd;
            &lt;xsd1:description&gt;${spDescription}&lt;/xsd1:description&gt;           &#xd;
         &lt;/xsd:serviceProvider&gt; &#xd;
      &lt;/xsd:createApplication&gt; &#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
            <stringProp name="HTTPSampler.port">${isPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService.IdentityApplicationManagementServiceHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:createApplication</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${adminCredentials}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="registerTravelocity" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://dto.saml.sso.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:addRPServiceProvider&gt;      &#xd;
         &lt;xsd:spDto&gt;        &#xd;
&#xd;
            &lt;xsd1:issuer&gt;${spName}&lt;/xsd1:issuer&gt;   &#xd;
            &lt;xsd1:assertionConsumerUrl&gt;http://${tomcatHost}:${tomcatPort}/${spName}/home.jsp&lt;/xsd1:assertionConsumerUrl&gt;&#xd;
            &lt;xsd1:assertionConsumerUrls&gt;http://${tomcatHost}:${tomcatPort}/${spName}/home.jsp&lt;/xsd1:assertionConsumerUrls&gt;&#xd;
       &lt;xsd1:defaultAssertionConsumerUrl&gt;http://${tomcatHost}:${tomcatPort}/${spName}/home.jsp&lt;/xsd1:defaultAssertionConsumerUrl&gt;&#xd;
&#xd;
            &lt;xsd1:signingAlgorithmURI&gt;http://www.w3.org/2000/09/xmldsig#rsa-sha1&lt;/xsd1:signingAlgorithmURI&gt;            &#xd;
            &lt;xsd1:digestAlgorithmURI&gt;http://www.w3.org/2000/09/xmldsig#sha1&lt;/xsd1:digestAlgorithmURI&gt;&#xd;
            &lt;xsd1:doSignAssertions&gt;true&lt;/xsd1:doSignAssertions&gt;&#xd;
            &lt;xsd1:doSignResponse&gt;true&lt;/xsd1:doSignResponse&gt;&#xd;
            &lt;xsd1:doSingleLogout&gt;true&lt;/xsd1:doSingleLogout&gt;&#xd;
            &lt;xsd1:doValidateSignatureInRequests&gt;false&lt;/xsd1:doValidateSignatureInRequests&gt;&#xd;
            &lt;xsd1:enableAttributeProfile&gt;true&lt;/xsd1:enableAttributeProfile&gt;&#xd;
            &lt;xsd1:enableAttributesByDefault&gt;true&lt;/xsd1:enableAttributesByDefault&gt;&#xd;
        &#xd;
         &lt;/xsd:spDto&gt;&#xd;
      &lt;/xsd:addRPServiceProvider&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
            <stringProp name="HTTPSampler.port">${isPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentitySAMLSSOConfigService.IdentitySAMLSSOConfigServiceHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${adminCredentials}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:addRPServiceProvider</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getServiceIndex" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:getServiceProviders/&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
            <stringProp name="HTTPSampler.port">${isPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentitySAMLSSOConfigService.IdentitySAMLSSOConfigServiceHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Service Index Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">serviceIndex</stringProp>
              <stringProp name="RegexExtractor.regex">attributeConsumingServiceIndex&gt;(.*?)&lt;/</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NP_ServiceIndex</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${adminCredentials}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:getServiceProviders</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getSPID" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:getApplication&gt;&#xd;
         &lt;xsd:applicationName&gt;${spName}&lt;/xsd:applicationName&gt;&#xd;
      &lt;/xsd:getApplication&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
            <stringProp name="HTTPSampler.port">${isPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService.IdentityApplicationManagementServiceHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">appID</stringProp>
              <stringProp name="RegexExtractor.regex">applicationID&gt;(.*?)&lt;/</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NP_AppID</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${adminCredentials}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:getApplication</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateSPWithIDP1Facebook" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:updateApplication&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:serviceProvider&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd1:applicationID&gt;${appID}&lt;/xsd1:applicationID&gt;&#xd;
            &lt;xsd1:applicationName&gt;${spName}&lt;/xsd1:applicationName&gt; &#xd;
            &#xd;
         &#xd;
            &#xd;
            &lt;xsd1:description&gt;${spDescription}&lt;/xsd1:description&gt; &#xd;
            &lt;xsd1:inboundAuthenticationConfig&gt;            &#xd;
                &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${carbonServer}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;samlsso&lt;/xsd1:inboundAuthType&gt;                  &#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
			   &lt;xsd1:properties&gt;&#xd;
                     &lt;xsd1:confidential&gt;false&lt;/xsd1:confidential&gt;&#xd;
                     &lt;xsd1:defaultValue xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:description xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:displayName xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:displayOrder&gt;0&lt;/xsd1:displayOrder&gt;                      &#xd;
                     &lt;xsd1:name&gt;attrConsumServiceIndex&lt;/xsd1:name&gt;&#xd;
                     &lt;xsd1:required&gt;false&lt;/xsd1:required&gt;&#xd;
                     &lt;xsd1:type xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:value&gt;${serviceIndex}&lt;/xsd1:value&gt;&#xd;
                  &lt;/xsd1:properties&gt;                  &#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;    &#xd;
&#xd;
                &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:friendlyName xsd:nil=&quot;true&quot;/&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${carbonServer}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;openid&lt;/xsd1:inboundAuthType&gt;&#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
               &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:friendlyName xsd:nil=&quot;true&quot;/&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${carbonServer}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;passivests&lt;/xsd1:inboundAuthType&gt;&#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
&#xd;
               &#xd;
                        &#xd;
           &lt;/xsd1:inboundAuthenticationConfig&gt; &#xd;
            &lt;xsd1:inboundProvisioningConfig&gt; &#xd;
               &lt;xsd1:provisioningEnabled&gt;false&lt;/xsd1:provisioningEnabled&gt; &#xd;
               &lt;xsd1:provisioningUserStore/&gt; &#xd;
            &lt;/xsd1:inboundProvisioningConfig&gt; &#xd;
 &lt;xsd1:localAndOutBoundAuthenticationConfig&gt; &lt;xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;false&lt;/xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt; &#xd;
               &#xd;
               &#xd;
               &lt;xsd1:authenticationType&gt;federated&lt;/xsd1:authenticationType&gt; &#xd;
               &lt;xsd1:authenticationSteps&gt;&#xd;
        &lt;!--Zero or more repetitions:--&gt;&#xd;
        &lt;xsd1:federatedIdentityProviders&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd1:identityProviderName&gt;${idpName}&lt;/xsd1:identityProviderName&gt;&#xd;
        &lt;/xsd1:federatedIdentityProviders&gt;&#xd;
    &lt;/xsd1:authenticationSteps&gt;&#xd;
               &#xd;
            &lt;/xsd1:localAndOutBoundAuthenticationConfig&gt; &#xd;
            &lt;xsd1:outboundProvisioningConfig&gt; &#xd;
               &lt;xsd1:provisionByRoleList xsd:nil=&quot;true&quot;/&gt; &#xd;
            &lt;/xsd1:outboundProvisioningConfig&gt; &#xd;
            &lt;xsd1:permissionAndRoleConfig&gt; &#xd;
             &lt;xsd1:idpRoles&gt;myapp1&lt;/xsd1:idpRoles&gt; &#xd;
            &lt;/xsd1:permissionAndRoleConfig&gt; &#xd;
            &lt;xsd1:requestPathAuthenticatorConfigs&gt;              &#xd;
               &lt;xsd1:displayName&gt;?&lt;/xsd1:displayName&gt;&#xd;
               &lt;xsd1:enabled&gt;true&lt;/xsd1:enabled&gt;&#xd;
               &lt;xsd1:name&gt;BasicAuthRequestPathAuthenticator&lt;/xsd1:name&gt;               &#xd;
               &lt;xsd1:valid&gt;true&lt;/xsd1:valid&gt;&#xd;
            &lt;/xsd1:requestPathAuthenticatorConfigs&gt;           &#xd;
            &lt;xsd1:saasApp&gt;false&lt;/xsd1:saasApp&gt; &#xd;
         &lt;/xsd:serviceProvider&gt;&#xd;
      &lt;/xsd:updateApplication&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
            <stringProp name="HTTPSampler.port">${isPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${adminCredentials}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:updateApplication</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Travelocity Login Facebook IDP" enabled="true">
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.htmlunit.HtmlUnitDriver;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.support.ui.*;
import java.lang.String;
import java.util.concurrent.*;
import com.gargoylesoftware.htmlunit.*;
import com.gargoylesoftware.htmlunit.BrowserVersion;

try {
		public HtmlUnitDriver driver = new HtmlUnitDriver(BrowserVersion.CHROME, true);

		String protocole = &quot;http://&quot;;
		String tomcathost = vars.get(&quot;tomcatHost&quot;);
		String seperator = &quot;:&quot;;
		String tomcatport = vars.get(&quot;tomcatPort&quot;);
		String url = &quot;/travelocity.com/index.jsp&quot;;

		String AppURL = protocole + tomcathost + seperator + tomcatport + url;
		
		driver.get(AppURL);
		driver.manage().timeouts().implicitlyWait(15,TimeUnit.SECONDS);

		WebElement link = driver.findElement(By.linkText(&quot;here&quot;));
		link.click();

		WebElement username =  driver.findElement(By.id(&quot;email&quot;));
		username.clear();
		username.sendKeys(new String[] { vars.get(&quot;fbUserName&quot;) });

		WebElement password =  driver.findElement(By.id(&quot;pass&quot;));
		password.clear();
		password.sendKeys(new String[] {vars.get(&quot;fbPassword&quot;)});

		WebElement button = driver.findElement(By.id(&quot;loginbutton&quot;));
		button.click();

		String pageSource = driver.getPageSource();

		if(driver.getPageSource().contains(&quot;User Consents&quot;)) {

		WebElement checkbox = driver.findElement(By.id(&quot;consent_select_all&quot;));
		checkbox.click();
		System.out.println(&quot;check box clicked&quot;);

		WebElement approvebutton = driver.findElement(By.id(&quot;approve&quot;));
		approvebutton.click();
		System.out.println(&quot;approve button clicked&quot;);

		return driver.getPageSource();  
				
		} else{

		log.info(&quot;User Consent page missing&quot;);
		SampleResult.setResponseMessage(&quot;Error loading user consent page&quot;);
	
		}
    
} catch (Exception ex) {
    ex.printStackTrace();
    log.error(ex.getMessage());
     SampleResult.setSuccessful(false);
     SampleResult.setResponseCode(&quot;500&quot;);
     SampleResult.setResponseMessage(ex.getMessage());
} </stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="updateSPWithIDP2TwitterWithTwitterConnector" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:updateApplication&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:serviceProvider&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd1:applicationID&gt;${appID}&lt;/xsd1:applicationID&gt;&#xd;
            &lt;xsd1:applicationName&gt;${spName}&lt;/xsd1:applicationName&gt; &#xd;
            &#xd;
            &#xd;
            &#xd;
            &lt;xsd1:description&gt;${spDescription}&lt;/xsd1:description&gt; &#xd;
            &lt;xsd1:inboundAuthenticationConfig&gt;            &#xd;
                &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${carbonServer}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;samlsso&lt;/xsd1:inboundAuthType&gt;                  &#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
			   &lt;xsd1:properties&gt;&#xd;
                     &lt;xsd1:confidential&gt;false&lt;/xsd1:confidential&gt;&#xd;
                     &lt;xsd1:defaultValue xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:description xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:displayName xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:displayOrder&gt;0&lt;/xsd1:displayOrder&gt;                      &#xd;
                     &lt;xsd1:name&gt;attrConsumServiceIndex&lt;/xsd1:name&gt;&#xd;
                     &lt;xsd1:required&gt;false&lt;/xsd1:required&gt;&#xd;
                     &lt;xsd1:type xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:value&gt;${serviceIndex}&lt;/xsd1:value&gt;&#xd;
                  &lt;/xsd1:properties&gt;                  &#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;    &#xd;
&#xd;
                &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:friendlyName xsd:nil=&quot;true&quot;/&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${carbonServer}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;openid&lt;/xsd1:inboundAuthType&gt;&#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
               &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:friendlyName xsd:nil=&quot;true&quot;/&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${carbonServer}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;passivests&lt;/xsd1:inboundAuthType&gt;&#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
&#xd;
               &#xd;
                        &#xd;
           &lt;/xsd1:inboundAuthenticationConfig&gt; &#xd;
            &lt;xsd1:inboundProvisioningConfig&gt; &#xd;
               &lt;xsd1:provisioningEnabled&gt;false&lt;/xsd1:provisioningEnabled&gt; &#xd;
               &lt;xsd1:provisioningUserStore/&gt; &#xd;
            &lt;/xsd1:inboundProvisioningConfig&gt; &#xd;
 &lt;xsd1:localAndOutBoundAuthenticationConfig&gt; &lt;xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;false&lt;/xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt; &#xd;
               &#xd;
               &#xd;
               &lt;xsd1:authenticationType&gt;federated&lt;/xsd1:authenticationType&gt; &#xd;
               &lt;xsd1:authenticationSteps&gt;&#xd;
        &lt;!--Zero or more repetitions:--&gt;&#xd;
        &lt;xsd1:federatedIdentityProviders&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd1:identityProviderName&gt;${idp2Name}&lt;/xsd1:identityProviderName&gt;&#xd;
        &lt;/xsd1:federatedIdentityProviders&gt;&#xd;
    &lt;/xsd1:authenticationSteps&gt;&#xd;
               &#xd;
            &lt;/xsd1:localAndOutBoundAuthenticationConfig&gt; &#xd;
            &lt;xsd1:outboundProvisioningConfig&gt; &#xd;
               &lt;xsd1:provisionByRoleList xsd:nil=&quot;true&quot;/&gt; &#xd;
            &lt;/xsd1:outboundProvisioningConfig&gt; &#xd;
            &lt;xsd1:permissionAndRoleConfig&gt; &#xd;
             &lt;xsd1:idpRoles&gt;myapp1&lt;/xsd1:idpRoles&gt; &#xd;
            &lt;/xsd1:permissionAndRoleConfig&gt; &#xd;
            &lt;xsd1:requestPathAuthenticatorConfigs&gt;              &#xd;
               &lt;xsd1:displayName&gt;?&lt;/xsd1:displayName&gt;&#xd;
               &lt;xsd1:enabled&gt;true&lt;/xsd1:enabled&gt;&#xd;
               &lt;xsd1:name&gt;BasicAuthRequestPathAuthenticator&lt;/xsd1:name&gt;               &#xd;
               &lt;xsd1:valid&gt;true&lt;/xsd1:valid&gt;&#xd;
            &lt;/xsd1:requestPathAuthenticatorConfigs&gt;           &#xd;
            &lt;xsd1:saasApp&gt;false&lt;/xsd1:saasApp&gt; &#xd;
         &lt;/xsd:serviceProvider&gt;&#xd;
      &lt;/xsd:updateApplication&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
            <stringProp name="HTTPSampler.port">${isPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${adminCredentials}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:updateApplication</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="travelocityLoginTwitterIDP" enabled="true">
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.htmlunit.HtmlUnitDriver;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.support.ui.*;
import java.lang.String;
import java.util.concurrent.*;
import com.gargoylesoftware.htmlunit.*;
import com.gargoylesoftware.htmlunit.BrowserVersion;

try {
		public HtmlUnitDriver driver = new HtmlUnitDriver(BrowserVersion.CHROME, true);

		String protocole = &quot;http://&quot;;
		String tomcathost = vars.get(&quot;tomcatHost&quot;);
		String seperator = &quot;:&quot;;
		String tomcatport = vars.get(&quot;tomcatPort&quot;);
		String url = &quot;/travelocity.com/index.jsp&quot;;

		String AppURL = protocole + tomcathost + seperator + tomcatport + url;
		
		driver.get(AppURL);
		driver.manage().timeouts().implicitlyWait(10,TimeUnit.SECONDS);

		WebElement link = driver.findElement(By.linkText(&quot;here&quot;));
		link.click();

		WebElement username =  driver.findElement(By.id(&quot;username_or_email&quot;));
		username.clear();
		username.sendKeys(new String[] { vars.get(&quot;twitterUserName&quot;) });

		WebElement password =  driver.findElement(By.id(&quot;password&quot;));
		password.clear();
		password.sendKeys(new String[] {vars.get(&quot;twitterPassword&quot;)});

		WebElement button = driver.findElement(By.id(&quot;allow&quot;));
		button.click();

		String pageSource = driver.getPageSource();

		if(driver.getPageSource().contains(&quot;User Consents&quot;)) {

		WebElement checkbox = driver.findElement(By.id(&quot;consent_select_all&quot;));
		checkbox.click();
		System.out.println(&quot;check box clicked&quot;);

		WebElement approvebutton = driver.findElement(By.id(&quot;approve&quot;));
		approvebutton.click();
		System.out.println(&quot;approve button clicked&quot;);

		return driver.getPageSource();  
				
		} else{

		log.info(&quot;User Consent page missing&quot;);
		SampleResult.setResponseMessage(&quot;Error loading user consent page&quot;);
	
		}
    
} catch (Exception ex) {
    ex.printStackTrace();
    log.error(ex.getMessage());
     SampleResult.setSuccessful(false);
     SampleResult.setResponseCode(&quot;500&quot;);
     SampleResult.setResponseMessage(ex.getMessage());
} </stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="federatedUserProvisioning [Negative]" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update IDP1 Facebook Fed Auth Facebook for Incorrect client ID" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:mgt=&quot;http://mgt.idp.carbon.wso2.org&quot; xmlns:xsd=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;mgt:updateIdP&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;mgt:oldIdPName&gt;${idpName}&lt;/mgt:oldIdPName&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;mgt:identityProvider&gt;&#xd;
            &lt;xsd:identityProviderName&gt;${idpName}&lt;/xsd:identityProviderName&gt;           &#xd;
            &lt;xsd:displayName&gt;${idpName}&lt;/xsd:displayName&gt;&#xd;
            &lt;xsd:enable&gt;true&lt;/xsd:enable&gt;&#xd;
            &lt;xsd:identityProviderDescription&gt;${idpDescription}&lt;/xsd:identityProviderDescription&gt;&#xd;
            &lt;xsd:alias&gt;https://${isHost}:${isPort}/oauth2/token/&lt;/xsd:alias&gt;&#xd;
            &lt;xsd:primary&gt;true&lt;/xsd:primary&gt;&#xd;
            &lt;xsd:provisioningRole&gt;-&lt;/xsd:provisioningRole&gt;&#xd;
&#xd;
&#xd;
           &#xd;
&#xd;
	/** Add Facebook as Federated Authenticator */&#xd;
           &lt;xsd:displayName&gt;${idpName}&lt;/xsd:displayName&gt;&#xd;
            &lt;xsd:enable&gt;true&lt;/xsd:enable&gt;&#xd;
            &lt;xsd:federationHub&gt;false&lt;/xsd:federationHub&gt;&#xd;
            &lt;xsd:identityProviderDescription&gt;${idpDescription}&lt;/xsd:identityProviderDescription&gt;&#xd;
            &lt;xsd:identityProviderName&gt;${idpName}&lt;/xsd:identityProviderName&gt;&#xd;
            &lt;xsd:primary&gt;true&lt;/xsd:primary&gt;&#xd;
            &#xd;
            &lt;xsd:defaultAuthenticatorConfig&gt;&#xd;
            &lt;xsd:displayName&gt;${idpName}&lt;/xsd:displayName&gt;&#xd;
               &lt;xsd:name&gt;FacebookAuthenticator&lt;/xsd:name&gt;&#xd;
            &lt;/xsd:defaultAuthenticatorConfig&gt;&#xd;
            &#xd;
            &lt;xsd:federatedAuthenticatorConfigs&gt;&#xd;
               &lt;xsd:displayName&gt;${idpName}&lt;/xsd:displayName&gt;&#xd;
               &lt;xsd:enabled&gt;true&lt;/xsd:enabled&gt;&#xd;
               &lt;xsd:name&gt;FacebookAuthenticator&lt;/xsd:name&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;ClientId&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;${fbIncorrectClientId}&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;ClientSecret&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;${fbClientSecret}&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;Scope&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;${fbScope}&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;callBackUrl&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;https://${isCallbackHost}:${isPort}/commonauth&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
               &lt;xsd:properties&gt;&#xd;
                  &lt;xsd:name&gt;UserInfoFields&lt;/xsd:name&gt;&#xd;
                  &lt;xsd:value&gt;${fbUserInfoFields}&lt;/xsd:value&gt;&#xd;
               &lt;/xsd:properties&gt;&#xd;
            &lt;/xsd:federatedAuthenticatorConfigs&gt;&#xd;
         &lt;/mgt:identityProvider&gt;&#xd;
      &lt;/mgt:addIdP&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
            <stringProp name="HTTPSampler.port">${isPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">services/IdentityProviderMgtService.IdentityProviderMgtServiceHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${adminCredentials}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:updateIdP</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update SP with IDP1 facebook" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:updateApplication&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:serviceProvider&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd1:applicationID&gt;${appID}&lt;/xsd1:applicationID&gt;&#xd;
            &lt;xsd1:applicationName&gt;${spName}&lt;/xsd1:applicationName&gt; &#xd;
            &#xd;
           &#xd;
            &#xd;
            &lt;xsd1:description&gt;${spDescription}&lt;/xsd1:description&gt; &#xd;
            &lt;xsd1:inboundAuthenticationConfig&gt;            &#xd;
                &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${carbonServer}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;samlsso&lt;/xsd1:inboundAuthType&gt;                  &#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
			   &lt;xsd1:properties&gt;&#xd;
                     &lt;xsd1:confidential&gt;false&lt;/xsd1:confidential&gt;&#xd;
                     &lt;xsd1:defaultValue xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:description xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:displayName xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:displayOrder&gt;0&lt;/xsd1:displayOrder&gt;                      &#xd;
                     &lt;xsd1:name&gt;attrConsumServiceIndex&lt;/xsd1:name&gt;&#xd;
                     &lt;xsd1:required&gt;false&lt;/xsd1:required&gt;&#xd;
                     &lt;xsd1:type xsd:nil=&quot;true&quot;/&gt;&#xd;
                     &lt;xsd1:value&gt;${serviceIndex}&lt;/xsd1:value&gt;&#xd;
                  &lt;/xsd1:properties&gt;                  &#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;    &#xd;
&#xd;
                &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:friendlyName xsd:nil=&quot;true&quot;/&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${carbonServer}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;openid&lt;/xsd1:inboundAuthType&gt;&#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
               &lt;xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
                  &lt;xsd1:friendlyName xsd:nil=&quot;true&quot;/&gt;&#xd;
                  &lt;xsd1:inboundAuthKey&gt;${carbonServer}&lt;/xsd1:inboundAuthKey&gt;&#xd;
                  &lt;xsd1:inboundAuthType&gt;passivests&lt;/xsd1:inboundAuthType&gt;&#xd;
                  &lt;xsd1:inboundConfigType&gt;standardAPP&lt;/xsd1:inboundConfigType&gt;&#xd;
               &lt;/xsd1:inboundAuthenticationRequestConfigs&gt;&#xd;
&#xd;
               &#xd;
                        &#xd;
           &lt;/xsd1:inboundAuthenticationConfig&gt; &#xd;
            &lt;xsd1:inboundProvisioningConfig&gt; &#xd;
               &lt;xsd1:provisioningEnabled&gt;false&lt;/xsd1:provisioningEnabled&gt; &#xd;
               &lt;xsd1:provisioningUserStore/&gt; &#xd;
            &lt;/xsd1:inboundProvisioningConfig&gt; &#xd;
 &lt;xsd1:localAndOutBoundAuthenticationConfig&gt; &lt;xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt;false&lt;/xsd1:alwaysSendBackAuthenticatedListOfIdPs&gt; &#xd;
               &#xd;
               &#xd;
               &lt;xsd1:authenticationType&gt;federated&lt;/xsd1:authenticationType&gt; &#xd;
               &lt;xsd1:authenticationSteps&gt;&#xd;
        &lt;!--Zero or more repetitions:--&gt;&#xd;
        &lt;xsd1:federatedIdentityProviders&gt;&#xd;
            &lt;!--Optional:--&gt;&#xd;
            &lt;xsd1:identityProviderName&gt;${idpName}&lt;/xsd1:identityProviderName&gt;&#xd;
        &lt;/xsd1:federatedIdentityProviders&gt;&#xd;
    &lt;/xsd1:authenticationSteps&gt;&#xd;
               &#xd;
            &lt;/xsd1:localAndOutBoundAuthenticationConfig&gt; &#xd;
            &lt;xsd1:outboundProvisioningConfig&gt; &#xd;
               &lt;xsd1:provisionByRoleList xsd:nil=&quot;true&quot;/&gt; &#xd;
            &lt;/xsd1:outboundProvisioningConfig&gt; &#xd;
            &lt;xsd1:permissionAndRoleConfig&gt; &#xd;
             &lt;xsd1:idpRoles&gt;myapp1&lt;/xsd1:idpRoles&gt; &#xd;
            &lt;/xsd1:permissionAndRoleConfig&gt; &#xd;
            &lt;xsd1:requestPathAuthenticatorConfigs&gt;              &#xd;
               &lt;xsd1:displayName&gt;?&lt;/xsd1:displayName&gt;&#xd;
               &lt;xsd1:enabled&gt;true&lt;/xsd1:enabled&gt;&#xd;
               &lt;xsd1:name&gt;BasicAuthRequestPathAuthenticator&lt;/xsd1:name&gt;               &#xd;
               &lt;xsd1:valid&gt;true&lt;/xsd1:valid&gt;&#xd;
            &lt;/xsd1:requestPathAuthenticatorConfigs&gt;           &#xd;
            &lt;xsd1:saasApp&gt;false&lt;/xsd1:saasApp&gt; &#xd;
         &lt;/xsd:serviceProvider&gt;&#xd;
      &lt;/xsd:updateApplication&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
            <stringProp name="HTTPSampler.port">${isPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${adminCredentials}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:updateApplication</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Travelocity Login Facebook IDP - invalid" enabled="true">
            <stringProp name="cacheKey"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.htmlunit.HtmlUnitDriver;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.support.ui.*;
import java.lang.String;
import java.util.concurrent.*;
import com.gargoylesoftware.htmlunit.*;
import com.gargoylesoftware.htmlunit.BrowserVersion;

try {
		public HtmlUnitDriver driver = new HtmlUnitDriver(BrowserVersion.CHROME, true);

		String protocole = &quot;http://&quot;;
		String tomcathost = vars.get(&quot;tomcatHost&quot;);
		String seperator = &quot;:&quot;;
		String tomcatport = vars.get(&quot;tomcatPort&quot;);
		String url = &quot;/travelocity.com/index.jsp&quot;;

		String AppURL = protocole + tomcathost + seperator + tomcatport + url;
		
		driver.get(AppURL);

		WebElement link = driver.findElement(By.linkText(&quot;here&quot;));
		link.click();



		//Returns the whole page
		return driver.getPageSource();  
    
} catch (Exception ex) {
    ex.printStackTrace();
    log.error(ex.getMessage());
     SampleResult.setSuccessful(false);
     SampleResult.setResponseCode(&quot;500&quot;);
     SampleResult.setResponseMessage(ex.getMessage());
} </stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223Sampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1613242883">Invalid App ID</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Logout Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:aut=&quot;http://authentication.services.core.carbon.wso2.org&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;aut:logout/&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
            <stringProp name="HTTPSampler.port">${isPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/services/AuthenticationAdmin.AuthenticationAdminHttpsSoap11Endpoint/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">urn:logout</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49588">202</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="cleanUpEnvironment" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1517938294000</longProp>
        <longProp name="ThreadGroup.end_time">1517938294000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:aut=&quot;http://authentication.services.core.carbon.wso2.org&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;aut:login&gt;&#xd;
         &lt;aut:username&gt;${adminusername}&lt;/aut:username&gt;&#xd;
         &lt;aut:password&gt;${adminpassword}&lt;/aut:password&gt;&#xd;
      &lt;/aut:login&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
          <stringProp name="HTTPSampler.port">${isPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/services/AuthenticationAdmin.AuthenticationAdminHttpsSoap11Endpoint/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">urn:login</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeleteSP" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot; xmlns:xsd1=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:deleteApplication&gt;&#xd;
         &lt;!--Optional:--&gt;&#xd;
         &lt;xsd:applicationName&gt;${spName}&lt;/xsd:applicationName&gt;&#xd;
      &lt;/xsd:deleteApplication&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
          <stringProp name="HTTPSampler.port">${isPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/services/IdentityApplicationManagementService.IdentityApplicationManagementServiceHttpsSoap11Endpoint/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${adminCredentials}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">urn:deleteApplication</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeleteIDP1 Facebook" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:mgt=&quot;http://mgt.idp.carbon.wso2.org&quot; xmlns:xsd=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;  &#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;     &#xd;
        &lt;mgt:deleteIdP&gt;&#xd;
            &lt;mgt:idPName&gt;${idpName}&lt;/mgt:idPName&gt;&#xd;
        &lt;/mgt:deleteIdP&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
          <stringProp name="HTTPSampler.port">${isPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/services/IdentityProviderMgtService.IdentityProviderMgtServiceHttpsSoap11Endpoint/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${adminCredentials}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">urn:deleteApplication</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DeleteIDP2 Twitter" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:mgt=&quot;http://mgt.idp.carbon.wso2.org&quot; xmlns:xsd=&quot;http://model.common.application.identity.carbon.wso2.org/xsd&quot;&gt;  &#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;     &#xd;
        &lt;mgt:deleteIdP&gt;&#xd;
            &lt;mgt:idPName&gt;${idp2Name}&lt;/mgt:idPName&gt;&#xd;
        &lt;/mgt:deleteIdP&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
          <stringProp name="HTTPSampler.port">${isPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/services/IdentityProviderMgtService.IdentityProviderMgtServiceHttpsSoap11Endpoint/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${adminCredentials}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">urn:deleteApplication</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Remove Secondary User Store1" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:deleteUserStore&gt;&#xd;
         &lt;xsd:domainName&gt;${secondaryJDBCDomain1}&lt;/xsd:domainName&gt;&#xd;
      &lt;/xsd:deleteUserStore&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
          <stringProp name="HTTPSampler.port">${isPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/services/UserStoreConfigAdminService</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Remove Secondary User Store</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">urn:deleteUserStore</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Remove Secondary User Store2" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:xsd=&quot;http://org.apache.axis2/xsd&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;xsd:deleteUserStore&gt;&#xd;
         &lt;xsd:domainName&gt;${secondaryJDBCDomain2}&lt;/xsd:domainName&gt;&#xd;
      &lt;/xsd:deleteUserStore&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
          <stringProp name="HTTPSampler.port">${isPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/services/UserStoreConfigAdminService</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Remove Secondary User Store</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">urn:deleteUserStore</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="200 OK HTTP Code Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1606201635">HTTP/1.1 200 OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_headers</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Logout Request" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:aut=&quot;http://authentication.services.core.carbon.wso2.org&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;aut:logout/&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${isHost}</stringProp>
          <stringProp name="HTTPSampler.port">${isPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/services/AuthenticationAdmin.AuthenticationAdminHttpsSoap11Endpoint/</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">urn:logout</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49588">202</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
